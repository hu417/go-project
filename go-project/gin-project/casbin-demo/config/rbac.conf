# Request definition 请求的格式; 即主体/角色（sub）、对象/资源（obj）和动作/操作/方法（act）
[request_definition]
r = sub, obj, act
 
# Policy definition 策略定义; 即主体/角色（sub）、对象/资源（obj）和动作/操作/方法（act）
[policy_definition]
p = sub, obj, act
 
#按照角色权限，g = 用户, 角色
#用户继承角色的资源和方法
[role_definition]
g = _, _
# g = _ , _ , _ 表示以域为基础(多商户模式)

# Policy effect 策列效果，表示有任意一条 policy rule 满足, 则最终结果为 allow；p.eft它可以是allow或deny，它是可选的，默认是allow
[policy_effect]
e = some(where (p.eft == allow))
# 必须至少有一个匹配的策略规则为允许，而不能有任何匹配的策略规则为拒绝
# e = some(where (p.eft == allow)) && !some(where (p.eft == deny))

 
# 匹配规则；表示如果请求的主体与策略中的角色匹配，并且请求的对象和动作也分别与策略中的对象和动作匹配，则认为请求匹配。
[matchers]
# m = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act
m = g(r.sub, p.sub)  && keyMatch(r.obj,p.obj) && (r.act == p.act || p.act == "*") || checkSuperAdmin(r.sub, "superadmin")