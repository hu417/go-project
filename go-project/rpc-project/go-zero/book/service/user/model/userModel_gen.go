// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheBookUserIdPrefix     = "cache:book:user:id:"
	cacheBookUserNumberPrefix = "cache:book:user:number:"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*User, error)
		FindOneByNumber(ctx context.Context, number string) (*User, error)
		FindOneByUsername(ctx context.Context, name string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserModel struct {
		sqlc.CachedConn
		table string
	}

	User struct {
		Id         int64     `db:"id"`
		Name       string    `db:"name"`     // 用户名称
		Gender     string    `db:"gender"`   // 男｜女｜未公开
		Password   string    `db:"password"` // 用户密码
		Number     string    `db:"number"`   // 学号
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserModel {
	return &defaultUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	bookUserIdKey := fmt.Sprintf("%s%v", cacheBookUserIdPrefix, id)
	bookUserNumberKey := fmt.Sprintf("%s%v", cacheBookUserNumberPrefix, data.Number)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, bookUserIdKey, bookUserNumberKey)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	bookUserIdKey := fmt.Sprintf("%s%v", cacheBookUserIdPrefix, id)
	var resp User
	err := m.QueryRowCtx(ctx, &resp, bookUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByNumber(ctx context.Context, number string) (*User, error) {
	bookUserNumberKey := fmt.Sprintf("%s%v", cacheBookUserNumberPrefix, number)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, bookUserNumberKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `number` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, number); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}


func (m *defaultUserModel) FindOneByUsername(ctx context.Context, name string) (*User, error) {
	bookUserNumberKey := fmt.Sprintf("%s%v", cacheBookUserNumberPrefix, name)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, bookUserNumberKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// func (m *defaultUserModel) FindPaginations(ctx context.Context, where string, Page, PageSize int64) ([]User, error) {
// 	var resp []User
// 	// 声明错误
// 	var err error
// 	// 分页使用的偏移量
// 	offset := (Page - 1) * PageSize
// 	// 没有检索条件：只有 `Page` 、`PageSize`
// 	if len(where) == 0 {
// 		query := fmt.Sprintf("select %s from %s order by create_time desc limit ?,?", productRows, m.table)
// 		err = m.QueryRowCtx(ctx, &resp, query, offset, PageSize)
// 	} else {
// 		// 有检索条件
// 		query := fmt.Sprintf("select %s from %s where %s order by create_time desc limit ?,?", productRows, m.table, where)
// 		err = m.conn.QueryRowsCtx(ctx, &resp, query, offset, PageSize)
// 	}
// 	switch err {
// 	case nil:
// 		return resp, nil
// 	case sqlc.ErrNotFound:
// 		return nil, ErrNotFound
// 	default:
// 		return nil, err
// 	}
// }


func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	bookUserIdKey := fmt.Sprintf("%s%v", cacheBookUserIdPrefix, data.Id)
	bookUserNumberKey := fmt.Sprintf("%s%v", cacheBookUserNumberPrefix, data.Number)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Gender, data.Password, data.Number)
	}, bookUserIdKey, bookUserNumberKey)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	bookUserIdKey := fmt.Sprintf("%s%v", cacheBookUserIdPrefix, data.Id)
	bookUserNumberKey := fmt.Sprintf("%s%v", cacheBookUserNumberPrefix, data.Number)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.Gender, newData.Password, newData.Number, newData.Id)
	}, bookUserIdKey, bookUserNumberKey)
	return err
}

func (m *defaultUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheBookUserIdPrefix, primary)
}

func (m *defaultUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
